// Generated by the protocol buffer compiler.  DO NOT EDIT!

package com.qualcomm.qti.vehicle.explorer.tests;

public final class VehicleExplorerProtos {
  private VehicleExplorerProtos() {}
  // enum NotificationType
  public static final int VNW_SIGNAL_VALUE_CHANGED = 0;
  public static final int VNW_SIGNAL_VALUE_REFRESHED = 1;
  public static final int VNW_PERIODIC_SIGNAL_VALUE_UPDATE = 2;
  
  @SuppressWarnings("hiding")
  public static final class SetSignalCmd extends
      com.google.protobuf.micro.MessageMicro {
    public SetSignalCmd() {}
    
    // repeated int32 signal_id = 1;
    public static final int SIGNAL_ID_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Integer> signalId_ =
      java.util.Collections.emptyList();
    public java.util.List<java.lang.Integer> getSignalIdList() {
      return signalId_;
    }
    public int getSignalIdCount() { return signalId_.size(); }
    public int getSignalId(int index) {
      return signalId_.get(index);
    }
    public SetSignalCmd setSignalId(int index, int value) {
      signalId_.set(index, value);
      return this;
    }
    public SetSignalCmd addSignalId(int value) {
      if (signalId_.isEmpty()) {
        signalId_ = new java.util.ArrayList<java.lang.Integer>();
      }
      signalId_.add(value);
      return this;
    }
    public SetSignalCmd clearSignalId() {
      signalId_ = java.util.Collections.emptyList();
      return this;
    }
    
    // repeated string value = 2;
    public static final int VALUE_FIELD_NUMBER = 2;
    private java.util.List<java.lang.String> value_ =
      java.util.Collections.emptyList();
    public java.util.List<java.lang.String> getValueList() {
      return value_;
    }
    public int getValueCount() { return value_.size(); }
    public java.lang.String getValue(int index) {
      return value_.get(index);
    }
    public SetSignalCmd setValue(int index, java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  value_.set(index, value);
      return this;
    }
    public SetSignalCmd addValue(java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  if (value_.isEmpty()) {
        value_ = new java.util.ArrayList<java.lang.String>();
      }
      value_.add(value);
      return this;
    }
    public SetSignalCmd clearValue() {
      value_ = java.util.Collections.emptyList();
      return this;
    }
    
    public final SetSignalCmd clear() {
      clearSignalId();
      clearValue();
      cachedSize = -1;
      return this;
    }
    
    public final boolean isInitialized() {
      return true;
    }
    
    @Override
    public void writeTo(com.google.protobuf.micro.CodedOutputStreamMicro output)
                        throws java.io.IOException {
      for (int element : getSignalIdList()) {
        output.writeInt32(1, element);
      }
      for (java.lang.String element : getValueList()) {
        output.writeString(2, element);
      }
    }
    
    private int cachedSize = -1;
    @Override
    public int getCachedSize() {
      if (cachedSize < 0) {
        // getSerializedSize sets cachedSize
        getSerializedSize();
      }
      return cachedSize;
    }
    
    @Override
    public int getSerializedSize() {
      int size = 0;
      {
        int dataSize = 0;
        for (int element : getSignalIdList()) {
          dataSize += com.google.protobuf.micro.CodedOutputStreamMicro
            .computeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * getSignalIdList().size();
      }
      {
        int dataSize = 0;
        for (java.lang.String element : getValueList()) {
          dataSize += com.google.protobuf.micro.CodedOutputStreamMicro
            .computeStringSizeNoTag(element);
        }
        size += dataSize;
        size += 1 * getValueList().size();
      }
      cachedSize = size;
      return size;
    }
    
    @Override
    public SetSignalCmd mergeFrom(
        com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
            addSignalId(input.readInt32());
            break;
          }
          case 18: {
            addValue(input.readString());
            break;
          }
        }
      }
    }
    
    public static SetSignalCmd parseFrom(byte[] data)
        throws com.google.protobuf.micro.InvalidProtocolBufferMicroException {
      return (SetSignalCmd) (new SetSignalCmd().mergeFrom(data));
    }
    
    public static SetSignalCmd parseFrom(
            com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      return new SetSignalCmd().mergeFrom(input);
    }
    
  }
  
  @SuppressWarnings("hiding")
  public static final class GetSignalCmd extends
      com.google.protobuf.micro.MessageMicro {
    public GetSignalCmd() {}
    
    // repeated int32 signal_id = 1;
    public static final int SIGNAL_ID_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Integer> signalId_ =
      java.util.Collections.emptyList();
    public java.util.List<java.lang.Integer> getSignalIdList() {
      return signalId_;
    }
    public int getSignalIdCount() { return signalId_.size(); }
    public int getSignalId(int index) {
      return signalId_.get(index);
    }
    public GetSignalCmd setSignalId(int index, int value) {
      signalId_.set(index, value);
      return this;
    }
    public GetSignalCmd addSignalId(int value) {
      if (signalId_.isEmpty()) {
        signalId_ = new java.util.ArrayList<java.lang.Integer>();
      }
      signalId_.add(value);
      return this;
    }
    public GetSignalCmd clearSignalId() {
      signalId_ = java.util.Collections.emptyList();
      return this;
    }
    
    public final GetSignalCmd clear() {
      clearSignalId();
      cachedSize = -1;
      return this;
    }
    
    public final boolean isInitialized() {
      return true;
    }
    
    @Override
    public void writeTo(com.google.protobuf.micro.CodedOutputStreamMicro output)
                        throws java.io.IOException {
      for (int element : getSignalIdList()) {
        output.writeInt32(1, element);
      }
    }
    
    private int cachedSize = -1;
    @Override
    public int getCachedSize() {
      if (cachedSize < 0) {
        // getSerializedSize sets cachedSize
        getSerializedSize();
      }
      return cachedSize;
    }
    
    @Override
    public int getSerializedSize() {
      int size = 0;
      {
        int dataSize = 0;
        for (int element : getSignalIdList()) {
          dataSize += com.google.protobuf.micro.CodedOutputStreamMicro
            .computeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * getSignalIdList().size();
      }
      cachedSize = size;
      return size;
    }
    
    @Override
    public GetSignalCmd mergeFrom(
        com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
            addSignalId(input.readInt32());
            break;
          }
        }
      }
    }
    
    public static GetSignalCmd parseFrom(byte[] data)
        throws com.google.protobuf.micro.InvalidProtocolBufferMicroException {
      return (GetSignalCmd) (new GetSignalCmd().mergeFrom(data));
    }
    
    public static GetSignalCmd parseFrom(
            com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      return new GetSignalCmd().mergeFrom(input);
    }
    
  }
  
  @SuppressWarnings("hiding")
  public static final class RegisterHandlerCmd extends
      com.google.protobuf.micro.MessageMicro {
    public RegisterHandlerCmd() {}
    
    // repeated int32 signal_id = 1;
    public static final int SIGNAL_ID_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Integer> signalId_ =
      java.util.Collections.emptyList();
    public java.util.List<java.lang.Integer> getSignalIdList() {
      return signalId_;
    }
    public int getSignalIdCount() { return signalId_.size(); }
    public int getSignalId(int index) {
      return signalId_.get(index);
    }
    public RegisterHandlerCmd setSignalId(int index, int value) {
      signalId_.set(index, value);
      return this;
    }
    public RegisterHandlerCmd addSignalId(int value) {
      if (signalId_.isEmpty()) {
        signalId_ = new java.util.ArrayList<java.lang.Integer>();
      }
      signalId_.add(value);
      return this;
    }
    public RegisterHandlerCmd clearSignalId() {
      signalId_ = java.util.Collections.emptyList();
      return this;
    }
    
    // repeated int32 notification_rate = 2;
    public static final int NOTIFICATION_RATE_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Integer> notificationRate_ =
      java.util.Collections.emptyList();
    public java.util.List<java.lang.Integer> getNotificationRateList() {
      return notificationRate_;
    }
    public int getNotificationRateCount() { return notificationRate_.size(); }
    public int getNotificationRate(int index) {
      return notificationRate_.get(index);
    }
    public RegisterHandlerCmd setNotificationRate(int index, int value) {
      notificationRate_.set(index, value);
      return this;
    }
    public RegisterHandlerCmd addNotificationRate(int value) {
      if (notificationRate_.isEmpty()) {
        notificationRate_ = new java.util.ArrayList<java.lang.Integer>();
      }
      notificationRate_.add(value);
      return this;
    }
    public RegisterHandlerCmd clearNotificationRate() {
      notificationRate_ = java.util.Collections.emptyList();
      return this;
    }
    
    // repeated .vehicleExplorerTest.NotificationType notification_type = 3;
    public static final int NOTIFICATION_TYPE_FIELD_NUMBER = 3;
    private java.util.List<Integer> notificationType_ =
      java.util.Collections.emptyList();
    public java.util.List<Integer> getNotificationTypeList() {
      return notificationType_;
    }
    public int getNotificationTypeCount() { return notificationType_.size(); }
    public int getNotificationType(int index) {
      return notificationType_.get(index);
    }
    public RegisterHandlerCmd setNotificationType(int index, int value) {
      notificationType_.set(index, value);
      return this;
    }
    public RegisterHandlerCmd addNotificationType(int value) {
      if (notificationType_.isEmpty()) {
        notificationType_ = new java.util.ArrayList<java.lang.Integer>();
      }
      notificationType_.add(value);
      return this;
    }
    public RegisterHandlerCmd clearNotificationType() {
      notificationType_ = java.util.Collections.emptyList();
      return this;
    }
    
    public final RegisterHandlerCmd clear() {
      clearSignalId();
      clearNotificationRate();
      clearNotificationType();
      cachedSize = -1;
      return this;
    }
    
    public final boolean isInitialized() {
      return true;
    }
    
    @Override
    public void writeTo(com.google.protobuf.micro.CodedOutputStreamMicro output)
                        throws java.io.IOException {
      for (int element : getSignalIdList()) {
        output.writeInt32(1, element);
      }
      for (int element : getNotificationRateList()) {
        output.writeInt32(2, element);
      }
      for (java.lang.Integer element : getNotificationTypeList()) {
        output.writeInt32(3, element);
      }
    }
    
    private int cachedSize = -1;
    @Override
    public int getCachedSize() {
      if (cachedSize < 0) {
        // getSerializedSize sets cachedSize
        getSerializedSize();
      }
      return cachedSize;
    }
    
    @Override
    public int getSerializedSize() {
      int size = 0;
      {
        int dataSize = 0;
        for (int element : getSignalIdList()) {
          dataSize += com.google.protobuf.micro.CodedOutputStreamMicro
            .computeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * getSignalIdList().size();
      }
      {
        int dataSize = 0;
        for (int element : getNotificationRateList()) {
          dataSize += com.google.protobuf.micro.CodedOutputStreamMicro
            .computeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * getNotificationRateList().size();
      }
      {
        int dataSize = 0;
        for (java.lang.Integer element : getNotificationTypeList()) {
          dataSize += com.google.protobuf.micro.CodedOutputStreamMicro
            .computeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * getNotificationTypeList().size();
      }
      cachedSize = size;
      return size;
    }
    
    @Override
    public RegisterHandlerCmd mergeFrom(
        com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
            addSignalId(input.readInt32());
            break;
          }
          case 16: {
            addNotificationRate(input.readInt32());
            break;
          }
          case 24: {
              addNotificationType(input.readInt32());
            break;
          }
        }
      }
    }
    
    public static RegisterHandlerCmd parseFrom(byte[] data)
        throws com.google.protobuf.micro.InvalidProtocolBufferMicroException {
      return (RegisterHandlerCmd) (new RegisterHandlerCmd().mergeFrom(data));
    }
    
    public static RegisterHandlerCmd parseFrom(
            com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      return new RegisterHandlerCmd().mergeFrom(input);
    }
    
  }
  
  @SuppressWarnings("hiding")
  public static final class RemoveHandlerCmd extends
      com.google.protobuf.micro.MessageMicro {
    public RemoveHandlerCmd() {}
    
    // repeated int32 signal_id = 1;
    public static final int SIGNAL_ID_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Integer> signalId_ =
      java.util.Collections.emptyList();
    public java.util.List<java.lang.Integer> getSignalIdList() {
      return signalId_;
    }
    public int getSignalIdCount() { return signalId_.size(); }
    public int getSignalId(int index) {
      return signalId_.get(index);
    }
    public RemoveHandlerCmd setSignalId(int index, int value) {
      signalId_.set(index, value);
      return this;
    }
    public RemoveHandlerCmd addSignalId(int value) {
      if (signalId_.isEmpty()) {
        signalId_ = new java.util.ArrayList<java.lang.Integer>();
      }
      signalId_.add(value);
      return this;
    }
    public RemoveHandlerCmd clearSignalId() {
      signalId_ = java.util.Collections.emptyList();
      return this;
    }
    
    public final RemoveHandlerCmd clear() {
      clearSignalId();
      cachedSize = -1;
      return this;
    }
    
    public final boolean isInitialized() {
      return true;
    }
    
    @Override
    public void writeTo(com.google.protobuf.micro.CodedOutputStreamMicro output)
                        throws java.io.IOException {
      for (int element : getSignalIdList()) {
        output.writeInt32(1, element);
      }
    }
    
    private int cachedSize = -1;
    @Override
    public int getCachedSize() {
      if (cachedSize < 0) {
        // getSerializedSize sets cachedSize
        getSerializedSize();
      }
      return cachedSize;
    }
    
    @Override
    public int getSerializedSize() {
      int size = 0;
      {
        int dataSize = 0;
        for (int element : getSignalIdList()) {
          dataSize += com.google.protobuf.micro.CodedOutputStreamMicro
            .computeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * getSignalIdList().size();
      }
      cachedSize = size;
      return size;
    }
    
    @Override
    public RemoveHandlerCmd mergeFrom(
        com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
            addSignalId(input.readInt32());
            break;
          }
        }
      }
    }
    
    public static RemoveHandlerCmd parseFrom(byte[] data)
        throws com.google.protobuf.micro.InvalidProtocolBufferMicroException {
      return (RemoveHandlerCmd) (new RemoveHandlerCmd().mergeFrom(data));
    }
    
    public static RemoveHandlerCmd parseFrom(
            com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      return new RemoveHandlerCmd().mergeFrom(input);
    }
    
  }
  
  @SuppressWarnings("hiding")
  public static final class FinalCmdFlag extends
      com.google.protobuf.micro.MessageMicro {
    public FinalCmdFlag() {}
    
    // required bool final_cmd = 1;
    public static final int FINAL_CMD_FIELD_NUMBER = 1;
    private boolean hasFinalCmd;
    private boolean finalCmd_ = false;
    public boolean getFinalCmd() { return finalCmd_; }
    public boolean hasFinalCmd() { return hasFinalCmd; }
    public FinalCmdFlag setFinalCmd(boolean value) {
      hasFinalCmd = true;
      finalCmd_ = value;
      return this;
    }
    public FinalCmdFlag clearFinalCmd() {
      hasFinalCmd = false;
      finalCmd_ = false;
      return this;
    }
    
    public final FinalCmdFlag clear() {
      clearFinalCmd();
      cachedSize = -1;
      return this;
    }
    
    public final boolean isInitialized() {
      if (!hasFinalCmd) return false;
      return true;
    }
    
    @Override
    public void writeTo(com.google.protobuf.micro.CodedOutputStreamMicro output)
                        throws java.io.IOException {
      if (hasFinalCmd()) {
        output.writeBool(1, getFinalCmd());
      }
    }
    
    private int cachedSize = -1;
    @Override
    public int getCachedSize() {
      if (cachedSize < 0) {
        // getSerializedSize sets cachedSize
        getSerializedSize();
      }
      return cachedSize;
    }
    
    @Override
    public int getSerializedSize() {
      int size = 0;
      if (hasFinalCmd()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeBoolSize(1, getFinalCmd());
      }
      cachedSize = size;
      return size;
    }
    
    @Override
    public FinalCmdFlag mergeFrom(
        com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
            setFinalCmd(input.readBool());
            break;
          }
        }
      }
    }
    
    public static FinalCmdFlag parseFrom(byte[] data)
        throws com.google.protobuf.micro.InvalidProtocolBufferMicroException {
      return (FinalCmdFlag) (new FinalCmdFlag().mergeFrom(data));
    }
    
    public static FinalCmdFlag parseFrom(
            com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      return new FinalCmdFlag().mergeFrom(input);
    }
    
  }
  
  @SuppressWarnings("hiding")
  public static final class ToDevice extends
      com.google.protobuf.micro.MessageMicro {
    public ToDevice() {}
    
    // optional .vehicleExplorerTest.SetSignalCmd set_signal_cmd = 1;
    public static final int SET_SIGNAL_CMD_FIELD_NUMBER = 1;
    private boolean hasSetSignalCmd;
    private com.qualcomm.qti.vehicle.explorer.tests.VehicleExplorerProtos.SetSignalCmd setSignalCmd_ = null;
    public boolean hasSetSignalCmd() { return hasSetSignalCmd; }
    public com.qualcomm.qti.vehicle.explorer.tests.VehicleExplorerProtos.SetSignalCmd getSetSignalCmd() { return setSignalCmd_; }
    public ToDevice setSetSignalCmd(com.qualcomm.qti.vehicle.explorer.tests.VehicleExplorerProtos.SetSignalCmd value) {
      if (value == null) {
        throw new NullPointerException();
      }
      hasSetSignalCmd = true;
      setSignalCmd_ = value;
      return this;
    }
    public ToDevice clearSetSignalCmd() {
      hasSetSignalCmd = false;
      setSignalCmd_ = null;
      return this;
    }
    
    // optional .vehicleExplorerTest.GetSignalCmd get_signal_cmd = 2;
    public static final int GET_SIGNAL_CMD_FIELD_NUMBER = 2;
    private boolean hasGetSignalCmd;
    private com.qualcomm.qti.vehicle.explorer.tests.VehicleExplorerProtos.GetSignalCmd getSignalCmd_ = null;
    public boolean hasGetSignalCmd() { return hasGetSignalCmd; }
    public com.qualcomm.qti.vehicle.explorer.tests.VehicleExplorerProtos.GetSignalCmd getGetSignalCmd() { return getSignalCmd_; }
    public ToDevice setGetSignalCmd(com.qualcomm.qti.vehicle.explorer.tests.VehicleExplorerProtos.GetSignalCmd value) {
      if (value == null) {
        throw new NullPointerException();
      }
      hasGetSignalCmd = true;
      getSignalCmd_ = value;
      return this;
    }
    public ToDevice clearGetSignalCmd() {
      hasGetSignalCmd = false;
      getSignalCmd_ = null;
      return this;
    }
    
    // optional .vehicleExplorerTest.RegisterHandlerCmd register_handler_cmd = 3;
    public static final int REGISTER_HANDLER_CMD_FIELD_NUMBER = 3;
    private boolean hasRegisterHandlerCmd;
    private com.qualcomm.qti.vehicle.explorer.tests.VehicleExplorerProtos.RegisterHandlerCmd registerHandlerCmd_ = null;
    public boolean hasRegisterHandlerCmd() { return hasRegisterHandlerCmd; }
    public com.qualcomm.qti.vehicle.explorer.tests.VehicleExplorerProtos.RegisterHandlerCmd getRegisterHandlerCmd() { return registerHandlerCmd_; }
    public ToDevice setRegisterHandlerCmd(com.qualcomm.qti.vehicle.explorer.tests.VehicleExplorerProtos.RegisterHandlerCmd value) {
      if (value == null) {
        throw new NullPointerException();
      }
      hasRegisterHandlerCmd = true;
      registerHandlerCmd_ = value;
      return this;
    }
    public ToDevice clearRegisterHandlerCmd() {
      hasRegisterHandlerCmd = false;
      registerHandlerCmd_ = null;
      return this;
    }
    
    // optional .vehicleExplorerTest.RemoveHandlerCmd remove_handler_cmd = 4;
    public static final int REMOVE_HANDLER_CMD_FIELD_NUMBER = 4;
    private boolean hasRemoveHandlerCmd;
    private com.qualcomm.qti.vehicle.explorer.tests.VehicleExplorerProtos.RemoveHandlerCmd removeHandlerCmd_ = null;
    public boolean hasRemoveHandlerCmd() { return hasRemoveHandlerCmd; }
    public com.qualcomm.qti.vehicle.explorer.tests.VehicleExplorerProtos.RemoveHandlerCmd getRemoveHandlerCmd() { return removeHandlerCmd_; }
    public ToDevice setRemoveHandlerCmd(com.qualcomm.qti.vehicle.explorer.tests.VehicleExplorerProtos.RemoveHandlerCmd value) {
      if (value == null) {
        throw new NullPointerException();
      }
      hasRemoveHandlerCmd = true;
      removeHandlerCmd_ = value;
      return this;
    }
    public ToDevice clearRemoveHandlerCmd() {
      hasRemoveHandlerCmd = false;
      removeHandlerCmd_ = null;
      return this;
    }
    
    // optional .vehicleExplorerTest.FinalCmdFlag final_cmd_flag = 5;
    public static final int FINAL_CMD_FLAG_FIELD_NUMBER = 5;
    private boolean hasFinalCmdFlag;
    private com.qualcomm.qti.vehicle.explorer.tests.VehicleExplorerProtos.FinalCmdFlag finalCmdFlag_ = null;
    public boolean hasFinalCmdFlag() { return hasFinalCmdFlag; }
    public com.qualcomm.qti.vehicle.explorer.tests.VehicleExplorerProtos.FinalCmdFlag getFinalCmdFlag() { return finalCmdFlag_; }
    public ToDevice setFinalCmdFlag(com.qualcomm.qti.vehicle.explorer.tests.VehicleExplorerProtos.FinalCmdFlag value) {
      if (value == null) {
        throw new NullPointerException();
      }
      hasFinalCmdFlag = true;
      finalCmdFlag_ = value;
      return this;
    }
    public ToDevice clearFinalCmdFlag() {
      hasFinalCmdFlag = false;
      finalCmdFlag_ = null;
      return this;
    }
    
    public final ToDevice clear() {
      clearSetSignalCmd();
      clearGetSignalCmd();
      clearRegisterHandlerCmd();
      clearRemoveHandlerCmd();
      clearFinalCmdFlag();
      cachedSize = -1;
      return this;
    }
    
    public final boolean isInitialized() {
      if (hasFinalCmdFlag()) {
        if (!getFinalCmdFlag().isInitialized()) return false;
      }
      return true;
    }
    
    @Override
    public void writeTo(com.google.protobuf.micro.CodedOutputStreamMicro output)
                        throws java.io.IOException {
      if (hasSetSignalCmd()) {
        output.writeMessage(1, getSetSignalCmd());
      }
      if (hasGetSignalCmd()) {
        output.writeMessage(2, getGetSignalCmd());
      }
      if (hasRegisterHandlerCmd()) {
        output.writeMessage(3, getRegisterHandlerCmd());
      }
      if (hasRemoveHandlerCmd()) {
        output.writeMessage(4, getRemoveHandlerCmd());
      }
      if (hasFinalCmdFlag()) {
        output.writeMessage(5, getFinalCmdFlag());
      }
    }
    
    private int cachedSize = -1;
    @Override
    public int getCachedSize() {
      if (cachedSize < 0) {
        // getSerializedSize sets cachedSize
        getSerializedSize();
      }
      return cachedSize;
    }
    
    @Override
    public int getSerializedSize() {
      int size = 0;
      if (hasSetSignalCmd()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeMessageSize(1, getSetSignalCmd());
      }
      if (hasGetSignalCmd()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeMessageSize(2, getGetSignalCmd());
      }
      if (hasRegisterHandlerCmd()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeMessageSize(3, getRegisterHandlerCmd());
      }
      if (hasRemoveHandlerCmd()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeMessageSize(4, getRemoveHandlerCmd());
      }
      if (hasFinalCmdFlag()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeMessageSize(5, getFinalCmdFlag());
      }
      cachedSize = size;
      return size;
    }
    
    @Override
    public ToDevice mergeFrom(
        com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 10: {
            com.qualcomm.qti.vehicle.explorer.tests.VehicleExplorerProtos.SetSignalCmd value = new com.qualcomm.qti.vehicle.explorer.tests.VehicleExplorerProtos.SetSignalCmd();
            input.readMessage(value);
            setSetSignalCmd(value);
            break;
          }
          case 18: {
            com.qualcomm.qti.vehicle.explorer.tests.VehicleExplorerProtos.GetSignalCmd value = new com.qualcomm.qti.vehicle.explorer.tests.VehicleExplorerProtos.GetSignalCmd();
            input.readMessage(value);
            setGetSignalCmd(value);
            break;
          }
          case 26: {
            com.qualcomm.qti.vehicle.explorer.tests.VehicleExplorerProtos.RegisterHandlerCmd value = new com.qualcomm.qti.vehicle.explorer.tests.VehicleExplorerProtos.RegisterHandlerCmd();
            input.readMessage(value);
            setRegisterHandlerCmd(value);
            break;
          }
          case 34: {
            com.qualcomm.qti.vehicle.explorer.tests.VehicleExplorerProtos.RemoveHandlerCmd value = new com.qualcomm.qti.vehicle.explorer.tests.VehicleExplorerProtos.RemoveHandlerCmd();
            input.readMessage(value);
            setRemoveHandlerCmd(value);
            break;
          }
          case 42: {
            com.qualcomm.qti.vehicle.explorer.tests.VehicleExplorerProtos.FinalCmdFlag value = new com.qualcomm.qti.vehicle.explorer.tests.VehicleExplorerProtos.FinalCmdFlag();
            input.readMessage(value);
            setFinalCmdFlag(value);
            break;
          }
        }
      }
    }
    
    public static ToDevice parseFrom(byte[] data)
        throws com.google.protobuf.micro.InvalidProtocolBufferMicroException {
      return (ToDevice) (new ToDevice().mergeFrom(data));
    }
    
    public static ToDevice parseFrom(
            com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      return new ToDevice().mergeFrom(input);
    }
    
  }
  
  @SuppressWarnings("hiding")
  public static final class SetSignalResult extends
      com.google.protobuf.micro.MessageMicro {
    public SetSignalResult() {}
    
    // required bool success = 1;
    public static final int SUCCESS_FIELD_NUMBER = 1;
    private boolean hasSuccess;
    private boolean success_ = false;
    public boolean getSuccess() { return success_; }
    public boolean hasSuccess() { return hasSuccess; }
    public SetSignalResult setSuccess(boolean value) {
      hasSuccess = true;
      success_ = value;
      return this;
    }
    public SetSignalResult clearSuccess() {
      hasSuccess = false;
      success_ = false;
      return this;
    }
    
    public final SetSignalResult clear() {
      clearSuccess();
      cachedSize = -1;
      return this;
    }
    
    public final boolean isInitialized() {
      if (!hasSuccess) return false;
      return true;
    }
    
    @Override
    public void writeTo(com.google.protobuf.micro.CodedOutputStreamMicro output)
                        throws java.io.IOException {
      if (hasSuccess()) {
        output.writeBool(1, getSuccess());
      }
    }
    
    private int cachedSize = -1;
    @Override
    public int getCachedSize() {
      if (cachedSize < 0) {
        // getSerializedSize sets cachedSize
        getSerializedSize();
      }
      return cachedSize;
    }
    
    @Override
    public int getSerializedSize() {
      int size = 0;
      if (hasSuccess()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeBoolSize(1, getSuccess());
      }
      cachedSize = size;
      return size;
    }
    
    @Override
    public SetSignalResult mergeFrom(
        com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
            setSuccess(input.readBool());
            break;
          }
        }
      }
    }
    
    public static SetSignalResult parseFrom(byte[] data)
        throws com.google.protobuf.micro.InvalidProtocolBufferMicroException {
      return (SetSignalResult) (new SetSignalResult().mergeFrom(data));
    }
    
    public static SetSignalResult parseFrom(
            com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      return new SetSignalResult().mergeFrom(input);
    }
    
  }
  
  @SuppressWarnings("hiding")
  public static final class GetSignalResult extends
      com.google.protobuf.micro.MessageMicro {
    public GetSignalResult() {}
    
    // required bool success = 1;
    public static final int SUCCESS_FIELD_NUMBER = 1;
    private boolean hasSuccess;
    private boolean success_ = false;
    public boolean getSuccess() { return success_; }
    public boolean hasSuccess() { return hasSuccess; }
    public GetSignalResult setSuccess(boolean value) {
      hasSuccess = true;
      success_ = value;
      return this;
    }
    public GetSignalResult clearSuccess() {
      hasSuccess = false;
      success_ = false;
      return this;
    }
    
    // repeated string value = 2;
    public static final int VALUE_FIELD_NUMBER = 2;
    private java.util.List<java.lang.String> value_ =
      java.util.Collections.emptyList();
    public java.util.List<java.lang.String> getValueList() {
      return value_;
    }
    public int getValueCount() { return value_.size(); }
    public java.lang.String getValue(int index) {
      return value_.get(index);
    }
    public GetSignalResult setValue(int index, java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  value_.set(index, value);
      return this;
    }
    public GetSignalResult addValue(java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  if (value_.isEmpty()) {
        value_ = new java.util.ArrayList<java.lang.String>();
      }
      value_.add(value);
      return this;
    }
    public GetSignalResult clearValue() {
      value_ = java.util.Collections.emptyList();
      return this;
    }
    
    public final GetSignalResult clear() {
      clearSuccess();
      clearValue();
      cachedSize = -1;
      return this;
    }
    
    public final boolean isInitialized() {
      if (!hasSuccess) return false;
      return true;
    }
    
    @Override
    public void writeTo(com.google.protobuf.micro.CodedOutputStreamMicro output)
                        throws java.io.IOException {
      if (hasSuccess()) {
        output.writeBool(1, getSuccess());
      }
      for (java.lang.String element : getValueList()) {
        output.writeString(2, element);
      }
    }
    
    private int cachedSize = -1;
    @Override
    public int getCachedSize() {
      if (cachedSize < 0) {
        // getSerializedSize sets cachedSize
        getSerializedSize();
      }
      return cachedSize;
    }
    
    @Override
    public int getSerializedSize() {
      int size = 0;
      if (hasSuccess()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeBoolSize(1, getSuccess());
      }
      {
        int dataSize = 0;
        for (java.lang.String element : getValueList()) {
          dataSize += com.google.protobuf.micro.CodedOutputStreamMicro
            .computeStringSizeNoTag(element);
        }
        size += dataSize;
        size += 1 * getValueList().size();
      }
      cachedSize = size;
      return size;
    }
    
    @Override
    public GetSignalResult mergeFrom(
        com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
            setSuccess(input.readBool());
            break;
          }
          case 18: {
            addValue(input.readString());
            break;
          }
        }
      }
    }
    
    public static GetSignalResult parseFrom(byte[] data)
        throws com.google.protobuf.micro.InvalidProtocolBufferMicroException {
      return (GetSignalResult) (new GetSignalResult().mergeFrom(data));
    }
    
    public static GetSignalResult parseFrom(
            com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      return new GetSignalResult().mergeFrom(input);
    }
    
  }
  
  @SuppressWarnings("hiding")
  public static final class RegisterHandlerResult extends
      com.google.protobuf.micro.MessageMicro {
    public RegisterHandlerResult() {}
    
    // required bool success = 1;
    public static final int SUCCESS_FIELD_NUMBER = 1;
    private boolean hasSuccess;
    private boolean success_ = false;
    public boolean getSuccess() { return success_; }
    public boolean hasSuccess() { return hasSuccess; }
    public RegisterHandlerResult setSuccess(boolean value) {
      hasSuccess = true;
      success_ = value;
      return this;
    }
    public RegisterHandlerResult clearSuccess() {
      hasSuccess = false;
      success_ = false;
      return this;
    }
    
    public final RegisterHandlerResult clear() {
      clearSuccess();
      cachedSize = -1;
      return this;
    }
    
    public final boolean isInitialized() {
      if (!hasSuccess) return false;
      return true;
    }
    
    @Override
    public void writeTo(com.google.protobuf.micro.CodedOutputStreamMicro output)
                        throws java.io.IOException {
      if (hasSuccess()) {
        output.writeBool(1, getSuccess());
      }
    }
    
    private int cachedSize = -1;
    @Override
    public int getCachedSize() {
      if (cachedSize < 0) {
        // getSerializedSize sets cachedSize
        getSerializedSize();
      }
      return cachedSize;
    }
    
    @Override
    public int getSerializedSize() {
      int size = 0;
      if (hasSuccess()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeBoolSize(1, getSuccess());
      }
      cachedSize = size;
      return size;
    }
    
    @Override
    public RegisterHandlerResult mergeFrom(
        com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
            setSuccess(input.readBool());
            break;
          }
        }
      }
    }
    
    public static RegisterHandlerResult parseFrom(byte[] data)
        throws com.google.protobuf.micro.InvalidProtocolBufferMicroException {
      return (RegisterHandlerResult) (new RegisterHandlerResult().mergeFrom(data));
    }
    
    public static RegisterHandlerResult parseFrom(
            com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      return new RegisterHandlerResult().mergeFrom(input);
    }
    
  }
  
  @SuppressWarnings("hiding")
  public static final class RemoveHandlerResult extends
      com.google.protobuf.micro.MessageMicro {
    public RemoveHandlerResult() {}
    
    // required bool success = 1;
    public static final int SUCCESS_FIELD_NUMBER = 1;
    private boolean hasSuccess;
    private boolean success_ = false;
    public boolean getSuccess() { return success_; }
    public boolean hasSuccess() { return hasSuccess; }
    public RemoveHandlerResult setSuccess(boolean value) {
      hasSuccess = true;
      success_ = value;
      return this;
    }
    public RemoveHandlerResult clearSuccess() {
      hasSuccess = false;
      success_ = false;
      return this;
    }
    
    public final RemoveHandlerResult clear() {
      clearSuccess();
      cachedSize = -1;
      return this;
    }
    
    public final boolean isInitialized() {
      if (!hasSuccess) return false;
      return true;
    }
    
    @Override
    public void writeTo(com.google.protobuf.micro.CodedOutputStreamMicro output)
                        throws java.io.IOException {
      if (hasSuccess()) {
        output.writeBool(1, getSuccess());
      }
    }
    
    private int cachedSize = -1;
    @Override
    public int getCachedSize() {
      if (cachedSize < 0) {
        // getSerializedSize sets cachedSize
        getSerializedSize();
      }
      return cachedSize;
    }
    
    @Override
    public int getSerializedSize() {
      int size = 0;
      if (hasSuccess()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeBoolSize(1, getSuccess());
      }
      cachedSize = size;
      return size;
    }
    
    @Override
    public RemoveHandlerResult mergeFrom(
        com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
            setSuccess(input.readBool());
            break;
          }
        }
      }
    }
    
    public static RemoveHandlerResult parseFrom(byte[] data)
        throws com.google.protobuf.micro.InvalidProtocolBufferMicroException {
      return (RemoveHandlerResult) (new RemoveHandlerResult().mergeFrom(data));
    }
    
    public static RemoveHandlerResult parseFrom(
            com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      return new RemoveHandlerResult().mergeFrom(input);
    }
    
  }
  
  @SuppressWarnings("hiding")
  public static final class Signal extends
      com.google.protobuf.micro.MessageMicro {
    public Signal() {}
    
    // required int32 signal_id = 1;
    public static final int SIGNAL_ID_FIELD_NUMBER = 1;
    private boolean hasSignalId;
    private int signalId_ = 0;
    public int getSignalId() { return signalId_; }
    public boolean hasSignalId() { return hasSignalId; }
    public Signal setSignalId(int value) {
      hasSignalId = true;
      signalId_ = value;
      return this;
    }
    public Signal clearSignalId() {
      hasSignalId = false;
      signalId_ = 0;
      return this;
    }
    
    // required string value = 2;
    public static final int VALUE_FIELD_NUMBER = 2;
    private boolean hasValue;
    private java.lang.String value_ = "";
    public java.lang.String getValue() { return value_; }
    public boolean hasValue() { return hasValue; }
    public Signal setValue(java.lang.String value) {
      hasValue = true;
      value_ = value;
      return this;
    }
    public Signal clearValue() {
      hasValue = false;
      value_ = "";
      return this;
    }
    
    public final Signal clear() {
      clearSignalId();
      clearValue();
      cachedSize = -1;
      return this;
    }
    
    public final boolean isInitialized() {
      if (!hasSignalId) return false;
      if (!hasValue) return false;
      return true;
    }
    
    @Override
    public void writeTo(com.google.protobuf.micro.CodedOutputStreamMicro output)
                        throws java.io.IOException {
      if (hasSignalId()) {
        output.writeInt32(1, getSignalId());
      }
      if (hasValue()) {
        output.writeString(2, getValue());
      }
    }
    
    private int cachedSize = -1;
    @Override
    public int getCachedSize() {
      if (cachedSize < 0) {
        // getSerializedSize sets cachedSize
        getSerializedSize();
      }
      return cachedSize;
    }
    
    @Override
    public int getSerializedSize() {
      int size = 0;
      if (hasSignalId()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeInt32Size(1, getSignalId());
      }
      if (hasValue()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeStringSize(2, getValue());
      }
      cachedSize = size;
      return size;
    }
    
    @Override
    public Signal mergeFrom(
        com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
            setSignalId(input.readInt32());
            break;
          }
          case 18: {
            setValue(input.readString());
            break;
          }
        }
      }
    }
    
    public static Signal parseFrom(byte[] data)
        throws com.google.protobuf.micro.InvalidProtocolBufferMicroException {
      return (Signal) (new Signal().mergeFrom(data));
    }
    
    public static Signal parseFrom(
            com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      return new Signal().mergeFrom(input);
    }
    
  }
  
  @SuppressWarnings("hiding")
  public static final class FromDevice extends
      com.google.protobuf.micro.MessageMicro {
    public FromDevice() {}
    
    // optional .vehicleExplorerTest.SetSignalResult set_signal_result = 1;
    public static final int SET_SIGNAL_RESULT_FIELD_NUMBER = 1;
    private boolean hasSetSignalResult;
    private com.qualcomm.qti.vehicle.explorer.tests.VehicleExplorerProtos.SetSignalResult setSignalResult_ = null;
    public boolean hasSetSignalResult() { return hasSetSignalResult; }
    public com.qualcomm.qti.vehicle.explorer.tests.VehicleExplorerProtos.SetSignalResult getSetSignalResult() { return setSignalResult_; }
    public FromDevice setSetSignalResult(com.qualcomm.qti.vehicle.explorer.tests.VehicleExplorerProtos.SetSignalResult value) {
      if (value == null) {
        throw new NullPointerException();
      }
      hasSetSignalResult = true;
      setSignalResult_ = value;
      return this;
    }
    public FromDevice clearSetSignalResult() {
      hasSetSignalResult = false;
      setSignalResult_ = null;
      return this;
    }
    
    // optional .vehicleExplorerTest.GetSignalResult get_signal_result = 2;
    public static final int GET_SIGNAL_RESULT_FIELD_NUMBER = 2;
    private boolean hasGetSignalResult;
    private com.qualcomm.qti.vehicle.explorer.tests.VehicleExplorerProtos.GetSignalResult getSignalResult_ = null;
    public boolean hasGetSignalResult() { return hasGetSignalResult; }
    public com.qualcomm.qti.vehicle.explorer.tests.VehicleExplorerProtos.GetSignalResult getGetSignalResult() { return getSignalResult_; }
    public FromDevice setGetSignalResult(com.qualcomm.qti.vehicle.explorer.tests.VehicleExplorerProtos.GetSignalResult value) {
      if (value == null) {
        throw new NullPointerException();
      }
      hasGetSignalResult = true;
      getSignalResult_ = value;
      return this;
    }
    public FromDevice clearGetSignalResult() {
      hasGetSignalResult = false;
      getSignalResult_ = null;
      return this;
    }
    
    // optional .vehicleExplorerTest.RegisterHandlerResult register_handler_result = 3;
    public static final int REGISTER_HANDLER_RESULT_FIELD_NUMBER = 3;
    private boolean hasRegisterHandlerResult;
    private com.qualcomm.qti.vehicle.explorer.tests.VehicleExplorerProtos.RegisterHandlerResult registerHandlerResult_ = null;
    public boolean hasRegisterHandlerResult() { return hasRegisterHandlerResult; }
    public com.qualcomm.qti.vehicle.explorer.tests.VehicleExplorerProtos.RegisterHandlerResult getRegisterHandlerResult() { return registerHandlerResult_; }
    public FromDevice setRegisterHandlerResult(com.qualcomm.qti.vehicle.explorer.tests.VehicleExplorerProtos.RegisterHandlerResult value) {
      if (value == null) {
        throw new NullPointerException();
      }
      hasRegisterHandlerResult = true;
      registerHandlerResult_ = value;
      return this;
    }
    public FromDevice clearRegisterHandlerResult() {
      hasRegisterHandlerResult = false;
      registerHandlerResult_ = null;
      return this;
    }
    
    // optional .vehicleExplorerTest.RemoveHandlerResult remove_handler_result = 4;
    public static final int REMOVE_HANDLER_RESULT_FIELD_NUMBER = 4;
    private boolean hasRemoveHandlerResult;
    private com.qualcomm.qti.vehicle.explorer.tests.VehicleExplorerProtos.RemoveHandlerResult removeHandlerResult_ = null;
    public boolean hasRemoveHandlerResult() { return hasRemoveHandlerResult; }
    public com.qualcomm.qti.vehicle.explorer.tests.VehicleExplorerProtos.RemoveHandlerResult getRemoveHandlerResult() { return removeHandlerResult_; }
    public FromDevice setRemoveHandlerResult(com.qualcomm.qti.vehicle.explorer.tests.VehicleExplorerProtos.RemoveHandlerResult value) {
      if (value == null) {
        throw new NullPointerException();
      }
      hasRemoveHandlerResult = true;
      removeHandlerResult_ = value;
      return this;
    }
    public FromDevice clearRemoveHandlerResult() {
      hasRemoveHandlerResult = false;
      removeHandlerResult_ = null;
      return this;
    }
    
    // optional .vehicleExplorerTest.Signal signal = 5;
    public static final int SIGNAL_FIELD_NUMBER = 5;
    private boolean hasSignal;
    private com.qualcomm.qti.vehicle.explorer.tests.VehicleExplorerProtos.Signal signal_ = null;
    public boolean hasSignal() { return hasSignal; }
    public com.qualcomm.qti.vehicle.explorer.tests.VehicleExplorerProtos.Signal getSignal() { return signal_; }
    public FromDevice setSignal(com.qualcomm.qti.vehicle.explorer.tests.VehicleExplorerProtos.Signal value) {
      if (value == null) {
        throw new NullPointerException();
      }
      hasSignal = true;
      signal_ = value;
      return this;
    }
    public FromDevice clearSignal() {
      hasSignal = false;
      signal_ = null;
      return this;
    }
    
    public final FromDevice clear() {
      clearSetSignalResult();
      clearGetSignalResult();
      clearRegisterHandlerResult();
      clearRemoveHandlerResult();
      clearSignal();
      cachedSize = -1;
      return this;
    }
    
    public final boolean isInitialized() {
      if (hasSetSignalResult()) {
        if (!getSetSignalResult().isInitialized()) return false;
      }
      if (hasGetSignalResult()) {
        if (!getGetSignalResult().isInitialized()) return false;
      }
      if (hasRegisterHandlerResult()) {
        if (!getRegisterHandlerResult().isInitialized()) return false;
      }
      if (hasRemoveHandlerResult()) {
        if (!getRemoveHandlerResult().isInitialized()) return false;
      }
      if (hasSignal()) {
        if (!getSignal().isInitialized()) return false;
      }
      return true;
    }
    
    @Override
    public void writeTo(com.google.protobuf.micro.CodedOutputStreamMicro output)
                        throws java.io.IOException {
      if (hasSetSignalResult()) {
        output.writeMessage(1, getSetSignalResult());
      }
      if (hasGetSignalResult()) {
        output.writeMessage(2, getGetSignalResult());
      }
      if (hasRegisterHandlerResult()) {
        output.writeMessage(3, getRegisterHandlerResult());
      }
      if (hasRemoveHandlerResult()) {
        output.writeMessage(4, getRemoveHandlerResult());
      }
      if (hasSignal()) {
        output.writeMessage(5, getSignal());
      }
    }
    
    private int cachedSize = -1;
    @Override
    public int getCachedSize() {
      if (cachedSize < 0) {
        // getSerializedSize sets cachedSize
        getSerializedSize();
      }
      return cachedSize;
    }
    
    @Override
    public int getSerializedSize() {
      int size = 0;
      if (hasSetSignalResult()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeMessageSize(1, getSetSignalResult());
      }
      if (hasGetSignalResult()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeMessageSize(2, getGetSignalResult());
      }
      if (hasRegisterHandlerResult()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeMessageSize(3, getRegisterHandlerResult());
      }
      if (hasRemoveHandlerResult()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeMessageSize(4, getRemoveHandlerResult());
      }
      if (hasSignal()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeMessageSize(5, getSignal());
      }
      cachedSize = size;
      return size;
    }
    
    @Override
    public FromDevice mergeFrom(
        com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 10: {
            com.qualcomm.qti.vehicle.explorer.tests.VehicleExplorerProtos.SetSignalResult value = new com.qualcomm.qti.vehicle.explorer.tests.VehicleExplorerProtos.SetSignalResult();
            input.readMessage(value);
            setSetSignalResult(value);
            break;
          }
          case 18: {
            com.qualcomm.qti.vehicle.explorer.tests.VehicleExplorerProtos.GetSignalResult value = new com.qualcomm.qti.vehicle.explorer.tests.VehicleExplorerProtos.GetSignalResult();
            input.readMessage(value);
            setGetSignalResult(value);
            break;
          }
          case 26: {
            com.qualcomm.qti.vehicle.explorer.tests.VehicleExplorerProtos.RegisterHandlerResult value = new com.qualcomm.qti.vehicle.explorer.tests.VehicleExplorerProtos.RegisterHandlerResult();
            input.readMessage(value);
            setRegisterHandlerResult(value);
            break;
          }
          case 34: {
            com.qualcomm.qti.vehicle.explorer.tests.VehicleExplorerProtos.RemoveHandlerResult value = new com.qualcomm.qti.vehicle.explorer.tests.VehicleExplorerProtos.RemoveHandlerResult();
            input.readMessage(value);
            setRemoveHandlerResult(value);
            break;
          }
          case 42: {
            com.qualcomm.qti.vehicle.explorer.tests.VehicleExplorerProtos.Signal value = new com.qualcomm.qti.vehicle.explorer.tests.VehicleExplorerProtos.Signal();
            input.readMessage(value);
            setSignal(value);
            break;
          }
        }
      }
    }
    
    public static FromDevice parseFrom(byte[] data)
        throws com.google.protobuf.micro.InvalidProtocolBufferMicroException {
      return (FromDevice) (new FromDevice().mergeFrom(data));
    }
    
    public static FromDevice parseFrom(
            com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      return new FromDevice().mergeFrom(input);
    }
    
  }
  
}
